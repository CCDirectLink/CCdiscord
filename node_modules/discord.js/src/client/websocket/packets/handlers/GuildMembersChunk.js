const AbstractHandler = require('./AbstractHandler');
const {
    Events
} = require('../../../../util/Constants');
const Collection = require('../../../../util/Collection');

class GuildMembersChunkHandler extends AbstractHandler {
    handle(packet) {
        const client = this.packetManager.client;
        const data = packet.d;
        const guild = client.guilds.get(data.guild_id);
        if (!guild) return;
        const members = new Collection();

        for (const member of data.members) members.set(member.user.id, guild.members.create(member));

        client.emit(Events.GUILD_MEMBERS_CHUNK, members, guild);

        client.ws.lastHeartbeatAck = true;
    }
}

/**
 * Emitted whenever a chunk of guild members is received (all members come from the same guild).
 * @event Client#guildMembersChunk
 * @param {Collection<Snowflake, GuildMember>} members The members in the chunk
 * @param {Guild} guild The guild related to the member chunk
 */

module.exports = GuildMembersChunkHandler;